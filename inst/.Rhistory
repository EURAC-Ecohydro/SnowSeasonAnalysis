data=cbind(input_data[-c(1,2),-1],esqc_data[,-1])
for(j in 1:(ncol(data)-1)){
data[,j]=as.numeric(data[,j])
}
time=rownames(data)
year <- substring(time,1,4); month <- substring(time,6,7); day <- substring(time,9,10)
hour <- substring(time,12,13); min  <- substr(time,15,16);
date_chr <- paste(year, "-", month, "-", day, " ", hour, ":", min, ":00", sep="")
time_new <- as.POSIXct( strptime(x = date_chr, format = "%Y-%m-%d %H:%M:%S"), tz = 'Etc/GMT-1')
zoo_data=zoo(data[,-1], order.by = time_new)
zoo_events=zoo(events, order.by = time_new)
server=shinyServer(function(input, output) {
Precipitation=zoo_data[,which(colnames(zoo_data)=="Precip_T_Int15")]
val_index=zoo_events[,8]
zero=val_index[val_index==0]
zero[zero==0]=1
prec=val_index[val_index==1]
smelt=val_index[val_index==5]
smelt[smelt==5]=1
unc=val_index[val_index==9]
unc[unc==9]=1
dew=val_index[val_index==2]
irr=val_index[val_index==4]
irr[irr==4]=1
if(length(dew)!=0){
dew[dew==2]=1
m=merge(Precipitation,zero,prec,smelt,unc,dew,irr)
time(m)=as.POSIXct(time(m))
output$dygraph1 <- renderDygraph({
dygraph(m,group = "subplot1",ylab = "Precipitation [mm/h]",main=FILE_NAME) %>% dyRangeSelector()%>%
dySeries("Precipitation",axis = "y", color = "red" ,stepPlot = T)%>%
dySeries("zero",axis = "y2",color = "eeeeee", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("prec",axis = "y2",color = "blue", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("smelt",axis = "y2",color = "green", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("unc",axis = "y2",color = "yellow", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("dew",axis = "y2",color = "magenta", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("irr",axis = "y2",color = "#3297ac", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dyAxis("y2",valueRange = c(0,1.1))%>%
dyLegend(show="never")
})
} else {
p=merge(Precipitation,zero,prec,smelt,unc)
time(p)=as.POSIXct(time(p))
output$dygraph1 <- renderDygraph({
dygraph(p,group = "subplot1",ylab = "Precipitation [mm/h]",main=file) %>% dyRangeSelector()%>%
dySeries("Precipitation",axis = "y", color = "red" ,stepPlot = T)%>%
dySeries("zero",axis = "y2",color = "eeeeee", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("prec",axis = "y2",color = "blue", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("smelt",axis = "y2",color = "green", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("unc",axis = "y2",color = "yellow", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dyAxis("y2",valueRange = c(0,1.1))%>%
dyLegend(show="never")
})
}
if(any(colnames(zoo_data)=="Snow_Height")){
HS=zoo_data[,which(colnames(zoo_data)=="Snow_Height")]
HS1=HS
HS2=HS
n=merge(HS1,HS2)
time(n)=as.POSIXct(time(n))
output$dygraph2 <- renderDygraph({
dygraph(n,group = "subplot1",ylab="Snow Height [m]") %>% dyRangeSelector()%>%
dySeries("HS1",axis = "y", color = "grey" )%>%
dySeries("HS2",axis = "y2",color = "grey")%>%
dyAxis("y",valueRange = c(0,1.5))%>%
dyAxis("y2",valueRange = c(0,1.5))%>%
dyLegend(show="never")
})
} else{
HS_new=zoo(rep(x = 0,nrow(zoo_data)),order.by = time)
HS1=HS_new
HS2=HS_new
q=merge(HS1,HS2)
time(q)=as.POSIXct(time(q))
output$dygraph2 <- renderDygraph({
dygraph(q,group = "subplot1",ylab="Snow Height [m]",main="Ultrasonic sensor not installed: No Snow Height data available") %>% dyRangeSelector()%>%
dySeries("HS1",axis = "y", color = "grey" )%>%
dySeries("HS2",axis = "y2",color = "grey")%>%
dyAxis("y",valueRange = c(0,1.5))%>%
dyAxis("y2",valueRange = c(0,1.5))%>%
dyLegend(show="never")
})
}
})
shinyApp(ui = ui, server = server)
ui=shinyUI(fluidPage(
titlePanel(""),
# titlePanel("Comparison of Precipitation Quality Index with Snow Height"),
fluidRow(
dygraphOutput("dygraph1")
),
fluidRow(
dygraphOutput("dygraph2")
),
fluidRow(
h3(strong(" Legend:"))
),
fluidRow(
h5(strong(" Plot 1:")," the red line is the time series of hourly cumulated precipitation of a tipping bucket installed on the LTER station (Precip_T_Int15).")
),
fluidRow(
h5("The background has different colours based on classification of precipitation reading: ")
),
fluidRow(
h5(" Grey -> No precipitation; Blue -> True precipitation; Green -> Snow melting;")
),
fluidRow(
h5(" Magenta -> Dew or Fog; Yellow -> Uncertain data, possible precipitation not detected; Lightbue -> Irrigation or Dirt ")
),
fluidRow(
h5(strong(" Plot 2:")," the grey line is the time series Snow Height, if the sensor is installed on LTER station")
)
)
)
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_ESOLIP.R
# Description:  IMPORT RData AND VISUALIZE MODEL OUTPUT USING SHINY
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ~~~~~~ Section 1 ~~~~~~
# ====== Input ======
# Select which .RData you want to explore
FILE_NAME="B3_2000m_TOTAL"    # <-- without .csv
# You can process: B1_1000_TOTAL_2009_2016, B3_2000m_TOTAL, M3_total_2009_2016_15min (no snow_height),M0004 (no snow_height)
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ====================
# ====== Load .RData ======
load(paste(git_folder,"data/Output/Precipitation_metadata_RData/ESQC_",FILE_NAME,".RData",sep = ""))
esolip_data=esolip_output[[1]]
esolip_events=esolip_output[[2]]
# =========================
# ~~~~~~ Section 2 ~~~~~~
# ====== Run this SHINY APP ======
# Run this SHINY APP to plot 2 time series together: precipitation (with QC) and Snow_Height
require(shiny)
require(datasets)
require(zoo)
require(chron)
require(dygraphs)
ui=shinyUI(fluidPage(
titlePanel(""),
# titlePanel("Comparison of Precipitation Quality Index with Snow Height"),
fluidRow(
dygraphOutput("dygraph1")
),
fluidRow(
dygraphOutput("dygraph2")
),
fluidRow(
h3(strong(" Legend:"))
),
fluidRow(
h5(strong(" Plot 1:")," the red line is the time series of hourly cumulated precipitation of a tipping bucket installed on the LTER station (Precip_T_Int15).")
),
fluidRow(
h5("The background has different colours based on classification of precipitation reading: ")
),
fluidRow(
h5(" Grey -> No precipitation; Blue -> True precipitation; Green -> Snow melting;")
),
fluidRow(
h5(" Magenta -> Dew or Fog; Yellow -> Uncertain data, possible precipitation not detected; Lightbue -> Irrigation or Dirt ")
),
fluidRow(
h5(strong(" Plot 2:")," the grey line is the time series Snow Height, if the sensor is installed on LTER station")
)
)
)
esqc_data=esolip_data
events=esolip_events
input_data=read.csv(paste(git_folder,"data/Input_data/",FILE_NAME,".csv",sep = ""),stringsAsFactors = F)
units=input_data[c(1,2),]
rownames(input_data)=input_data[,1]
data=cbind(input_data[-c(1,2),-1],esqc_data[,-1])
for(j in 1:(ncol(data)-1)){
data[,j]=as.numeric(data[,j])
}
time=rownames(data)
year <- substring(time,1,4); month <- substring(time,6,7); day <- substring(time,9,10)
hour <- substring(time,12,13); min  <- substr(time,15,16);
date_chr <- paste(year, "-", month, "-", day, " ", hour, ":", min, ":00", sep="")
time_new <- as.POSIXct( strptime(x = date_chr, format = "%Y-%m-%d %H:%M:%S"), tz = 'Etc/GMT-1')
zoo_data=zoo(data[,-1], order.by = time_new)
zoo_events=zoo(events, order.by = time_new)
server=shinyServer(function(input, output) {
Precipitation=zoo_data[,which(colnames(zoo_data)=="Precip_T_Int15")]
val_index=zoo_events[,8]
zero=val_index[val_index==0]
zero[zero==0]=1
prec=val_index[val_index==1]
smelt=val_index[val_index==5]
smelt[smelt==5]=1
unc=val_index[val_index==9]
unc[unc==9]=1
dew=val_index[val_index==2]
irr=val_index[val_index==4]
irr[irr==4]=1
if(length(dew)!=0){       # if doesn't work the script insert here some checks on irr, in some cases there are any values corresponting to irr
dew[dew==2]=1
m=merge(Precipitation,zero,prec,smelt,unc,dew,irr)
time(m)=as.POSIXct(time(m))
output$dygraph1 <- renderDygraph({
dygraph(m,group = "subplot1",ylab = "Precipitation [mm/h]",main=FILE_NAME) %>% dyRangeSelector()%>%
dySeries("Precipitation",axis = "y", color = "red" ,stepPlot = T)%>%
dySeries("zero",axis = "y2",color = "eeeeee", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("prec",axis = "y2",color = "blue", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("smelt",axis = "y2",color = "green", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("unc",axis = "y2",color = "yellow", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("dew",axis = "y2",color = "magenta", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("irr",axis = "y2",color = "#3297ac", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dyAxis("y2",valueRange = c(0,1.1))%>%
dyLegend(show="never")
})
} else {
p=merge(Precipitation,zero,prec,smelt,unc)
time(p)=as.POSIXct(time(p))
output$dygraph1 <- renderDygraph({
dygraph(p,group = "subplot1",ylab = "Precipitation [mm/h]",main=file) %>% dyRangeSelector()%>%
dySeries("Precipitation",axis = "y", color = "red" ,stepPlot = T)%>%
dySeries("zero",axis = "y2",color = "eeeeee", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("prec",axis = "y2",color = "blue", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("smelt",axis = "y2",color = "green", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("unc",axis = "y2",color = "yellow", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dySeries("irr",axis = "y2",color = "#3297ac", fillGraph = T, stepPlot = T,strokeWidth = 2)%>%
dyAxis("y2",valueRange = c(0,1.1))%>%
dyLegend(show="never")
})
}
if(any(colnames(zoo_data)=="Snow_Height")){
HS=zoo_data[,which(colnames(zoo_data)=="Snow_Height")]
HS1=HS
HS2=HS
n=merge(HS1,HS2)
time(n)=as.POSIXct(time(n))
output$dygraph2 <- renderDygraph({
dygraph(n,group = "subplot1",ylab="Snow Height [m]") %>% dyRangeSelector()%>%
dySeries("HS1",axis = "y", color = "grey" )%>%
dySeries("HS2",axis = "y2",color = "grey")%>%
dyAxis("y",valueRange = c(0,1.5))%>%
dyAxis("y2",valueRange = c(0,1.5))%>%
dyLegend(show="never")
})
} else{
HS_new=zoo(rep(x = 0,nrow(zoo_data)),order.by = time)
HS1=HS_new
HS2=HS_new
q=merge(HS1,HS2)
time(q)=as.POSIXct(time(q))
output$dygraph2 <- renderDygraph({
dygraph(q,group = "subplot1",ylab="Snow Height [m]",main="Ultrasonic sensor not installed: No Snow Height data available") %>% dyRangeSelector()%>%
dySeries("HS1",axis = "y", color = "grey" )%>%
dySeries("HS2",axis = "y2",color = "grey")%>%
dyAxis("y",valueRange = c(0,1.5))%>%
dyAxis("y2",valueRange = c(0,1.5))%>%
dyLegend(show="never")
})
}
})
shinyApp(ui = ui, server = server)
Sys.setenv(TZ='Etc/GMT-1')
require(zoo)
require(chron)
require(dygraphs)
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
source(paste(git_folder,"R/sndet_read_data_metadata.R",sep = ""))
path=paste(git_folder,"data/Input_data/",sep="")
dir(path,pattern = ".csv")  # Show file available in folder
file = "B3_2000m_TOTAL.csv"
zoo_data=fun_read_data(PATH = path,FILE = file)
Sys.setenv(TZ='Etc/GMT-1')
require(zoo)
require(chron)
require(dygraphs)
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
source(paste(git_folder,"R/sndet_read_data_metadata.R",sep = ""))
path=paste(git_folder,"data/Input_data/",sep="")
dir(path,pattern = ".csv")  # Show file available in folder
file = "B3_2000m_TOTAL.csv"
print(paste("File available:"dir(path,pattern = ".csv"))  # Show file available in folder
# ==== INPUT ====
file = "B3_2000m_TOTAL.csv"
# ===============
zoo_data=fun_read_data(PATH = path,FILE = file)
# ~~~~~~ Section 2 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Check colnames(zoo_data) and assign the properly variable
#------------------------------------------------------------------------------------------------------------------------------------------------------
print(paste("Variable available:",colnames(zoo_data)))
# check in colnames(zoo_data) if there are:
# 1. Soil temperature (obligatory)
# 2. phar_up (obligatory)
# 3. phar_down (obligatory)
# 4. precipitation (optional)
# 5. snow_height (optional)
soil_temperature="ST_CS_00"                          # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==soil_temperature)])
phar_up="PAR_Up"                                     # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==phar_up)])
phar_down="PAR_Soil_LS"                              # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==phar_down)])
snow_height="Snow_Height"                            # <- optional
plot(zoo_data[,which(colnames(zoo_data)==snow_height)])
print(paste("File available:",dir(path,pattern = ".csv")))  # Show file available in folder
str(zoo_data)
print(paste("Variable available:",colnames(zoo_data)))
rm(list = ls(*))
rm(list = ls())
Sys.setenv(TZ='Etc/GMT-1')
require(zoo)
require(chron)
require(dygraphs)
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Import data (zoo object)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Import functions to read data
source(paste(git_folder,"R/sndet_read_data_metadata.R",sep = ""))
# Define path and file to import
path=paste(git_folder,"data/Input_data/",sep="")
print(paste("File available:",dir(path,pattern = ".csv")))  # Show file available in folder
# ==== INPUT ====
file = "B3_2000m_TOTAL.csv"
# ===============
zoo_data=fun_read_data(PATH = path,FILE = file)
# ~~~~~~ Section 2 ~~~~~~
print(paste("Variable available:",colnames(zoo_data)))
soil_temperature="ST_CS_00"                          # <- obligatory
print(paste("Variable available:",colnames(zoo_data)))
soil_temperature="ST_CS_00"                          # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==soil_temperature)])
phar_up="PAR_Up"                                     # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==phar_up)])
phar_down="PAR_Soil_LS"                              # <- obligatory
plot(zoo_data[,which(colnames(zoo_data)==phar_down)])
snow_height="Snow_Height"                            # <- optional
plot(zoo_data[,which(colnames(zoo_data)==snow_height)])
# ~~~~~~ Section 3 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Exctract soil temperature, par up and par down from zoo_data
#------------------------------------------------------------------------------------------------------------------------------------------------------
ST=zoo_data[,which(colnames(zoo_data)==soil_temperature)]            # Soil temperature @ 0 cm (superficial)
PAR_DOWN=zoo_data[,which(colnames(zoo_data)==phar_down)]             # Par_soil
PAR_UP=zoo_data[,which(colnames(zoo_data)==phar_up)]                 # Par_up
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Snow detection using Soil temperature
#------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste(git_folder,"R/sndet_soil_temp_snow_detection.R",sep = ""))
# SOIL_TEMPERATURE = ST
# MEAN_ST_THRESHOLD = 3.5               # Suggested value: 3.5 . Units: deg C (daily mean)
# AMPLITUDE_ST_THRESHOLD = 3            # Suggested value. 3.0 . Units: deg C (daily amplitude)
snow_by_soil_temp=fun_soil_temp_snow_detection(SOIL_TEMPERATURE = ST,MEAN_ST_THRESHOLD = 3.5,AMPLITUDE_ST_THRESHOLD = 3)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Snow detection using Phar sensors (Up an soil)
#------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste(git_folder,"R/sndet_phar_snow_detection.R",sep = ""))
# PAR_UP = PAR_UP
# PAR_DOWN = PAR_DOWN
# RATIO_THRESHOLD = 0.1                   #  Suggested value: 0.1 . Units: abs
# PAR_SOIL_THRESHOLD = 75                 #  Suggested value:  75 . Units: umol/(m²s)
snow_by_phar=fun_phar_snow_detection(PAR_UP = PAR_UP,PAR_DOWN = PAR_DOWN,RATIO_THRESHOLD = 0.1 ,PAR_SOIL_THRESHOLD = 75)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Snow detection (Phar + Soil Temperarature)
#------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste(git_folder,"R/sndet_snow_detection.R",sep = ""))
snow_detect=fun_snow_detection(SOIL_TEMP_SNOW = snow_by_soil_temp, PHAR_SNOW = snow_by_phar)
# Exclude snow cover during summer
SUMMER_MONTHS=c("05","06","07","08","09")               # <- select summer length based on position of station (elevation)
snow_detect[substring(index(snow_detect),6,7) %in% SUMMER_MONTHS]=0
output_for_Visualize_Snow_detection_TS_PAR=list(snow_height,file,zoo_data,
snow_detect,snow_by_soil_temp,snow_by_phar )
save(output_for_Visualize_Snow_detection_TS_PAR,file = paste(git_folder,"data/Output/Snow_Detection_RData/",substring(file,1,nchar(file)-4),".RData",sep = ""))
detection=merge(snow_detect, snow_by_phar,snow_by_soil_temp)
detection=as.data.frame(detection)
export=cbind(index(snow_detect),detection)
colnames(export)=c("TIMESTAMP","Snow presence PAR + Soil Temp", "Snow presence PAR","Snow presence Soil Temp")
rm(list = ls())
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
calib_snow = F    #<- T to calbrate snow heigh using snow surveys, F if use raw data
load(paste(git_folder,"data/Output/Snow_Detection_RData/",file,".RData",sep = ""))
snow_height = output_for_Visualize_Snow_detection_TS_PAR[[1]]
file = output_for_Visualize_Snow_detection_TS_PAR[[2]]
zoo_data  = output_for_Visualize_Snow_detection_TS_PAR[[3]]
snow_detect = output_for_Visualize_Snow_detection_TS_PAR[[4]]
snow_by_soil_temp = output_for_Visualize_Snow_detection_TS_PAR[[5]]
snow_by_phar = output_for_Visualize_Snow_detection_TS_PAR[[6]]
source(paste(git_folder,"R/sndet_calibration_HS.R",sep = ""))
source(paste(git_folder,"R/sndet_range.R",sep = ""))
folder_surveys=paste(git_folder,"data/Snow_Surveys/SnowSurvey_",sep = "")
if(any(colnames(zoo_data)==snow_height)){
zoo_data[,which(colnames(zoo_data)==snow_height)]=fun_range(DATA = zoo_data,VARIABLE = snow_height)
# Calibration of HS using end of snow season surveys "Virtual snow surveys" (Hypothesis, no snow --> HS=0)
HS=zoo_data[,which(colnames(zoo_data)==snow_height)]
HS_calibr=fun_calibration_HS(DATA = HS,FILE_NAME = file,PATH_SURVEYS = folder_surveys)
HS_flag=1
} else{
warning(paste(paste("Remember: snow_height data not available for station", substring(file,1,nchar(file)-4)),
"If it is FALSE, assign the proper variable in section above", sep="\n"))
HS_flag=0
}
source(paste(git_folder,"R/sndet_dygraphs_snow_detection.R",sep = ""))
if(calib_snow == T){
SNOW = HS_calibr
}else{
SNOW = HS
}
if(HS_flag==1){
models_graph=fun_plot_models_HS(FILE = file,SNOW_HEIGHT = SNOW,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}else{
models_graph=fun_plot_models(FILE = file,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}
# ~~~~~~~~ Section 1 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Snow_detection_TS_PAR.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
calib_snow = T    #<- T to calbrate snow heigh using snow surveys, F if use raw data
# ===============
load(paste(git_folder,"data/Output/Snow_Detection_RData/",file,".RData",sep = ""))
snow_height = output_for_Visualize_Snow_detection_TS_PAR[[1]]
file = output_for_Visualize_Snow_detection_TS_PAR[[2]]
zoo_data  = output_for_Visualize_Snow_detection_TS_PAR[[3]]
snow_detect = output_for_Visualize_Snow_detection_TS_PAR[[4]]
snow_by_soil_temp = output_for_Visualize_Snow_detection_TS_PAR[[5]]
snow_by_phar = output_for_Visualize_Snow_detection_TS_PAR[[6]]
# ~~~~~~~~ Section 2 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# calibration with "virtual" snow surveys
#------------------------------------------------------------------------------------------------------------------------------------------------------
# We suggest to use this calibration after a filtering procedure
# Time series should be filled before, or "virtual" snow survey should be done in when there is a value!
# Import functions to calibrate HS
source(paste(git_folder,"R/sndet_calibration_HS.R",sep = ""))
source(paste(git_folder,"R/sndet_range.R",sep = ""))
folder_surveys=paste(git_folder,"data/Snow_Surveys/SnowSurvey_",sep = "")
# check if snow height data are available
if(any(colnames(zoo_data)==snow_height)){
zoo_data[,which(colnames(zoo_data)==snow_height)]=fun_range(DATA = zoo_data,VARIABLE = snow_height)
# Calibration of HS using end of snow season surveys "Virtual snow surveys" (Hypothesis, no snow --> HS=0)
HS=zoo_data[,which(colnames(zoo_data)==snow_height)]
HS_calibr=fun_calibration_HS(DATA = HS,FILE_NAME = file,PATH_SURVEYS = folder_surveys)
HS_flag=1
} else{
warning(paste(paste("Remember: snow_height data not available for station", substring(file,1,nchar(file)-4)),
"If it is FALSE, assign the proper variable in section above", sep="\n"))
HS_flag=0
}
# ~~~~~~~~ Section 3 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Plot Snow detection models (Phar + Soil Temperarature) using dygraphs
#------------------------------------------------------------------------------------------------------------------------------------------------------
source(paste(git_folder,"R/sndet_dygraphs_snow_detection.R",sep = ""))
# source("H:/Projekte/Criomon/06_Workspace/BrC/Cryomon/03_R_Script/05_snow_filter/function/fun_dygraphs_snow_detection.R")
if(calib_snow == T){
SNOW = HS_calibr
}else{
SNOW = HS
}
if(HS_flag==1){
models_graph=fun_plot_models_HS(FILE = file,SNOW_HEIGHT = SNOW,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}else{
models_graph=fun_plot_models(FILE = file,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
calib_snow = T    #<- T to calbrate snow heigh using snow surveys, F if use raw data
load(paste(git_folder,"data/Output/Snow_Detection_RData/",file,".RData",sep = ""))
snow_height = output_for_Visualize_Snow_detection_TS_PAR[[1]]
file = output_for_Visualize_Snow_detection_TS_PAR[[2]]
zoo_data  = output_for_Visualize_Snow_detection_TS_PAR[[3]]
snow_detect = output_for_Visualize_Snow_detection_TS_PAR[[4]]
snow_by_soil_temp = output_for_Visualize_Snow_detection_TS_PAR[[5]]
snow_by_phar = output_for_Visualize_Snow_detection_TS_PAR[[6]]
source(paste(git_folder,"R/sndet_calibration_HS.R",sep = ""))
source(paste(git_folder,"R/sndet_range.R",sep = ""))
folder_surveys=paste(git_folder,"data/Snow_Surveys/SnowSurvey_",sep = "")
if(any(colnames(zoo_data)==snow_height)){
zoo_data[,which(colnames(zoo_data)==snow_height)]=fun_range(DATA = zoo_data,VARIABLE = snow_height)
# Calibration of HS using end of snow season surveys "Virtual snow surveys" (Hypothesis, no snow --> HS=0)
HS=zoo_data[,which(colnames(zoo_data)==snow_height)]
HS_calibr=fun_calibration_HS(DATA = HS,FILE_NAME = file,PATH_SURVEYS = folder_surveys)
HS_flag=1
} else{
warning(paste(paste("Remember: snow_height data not available for station", substring(file,1,nchar(file)-4)),
"If it is FALSE, assign the proper variable in section above", sep="\n"))
HS_flag=0
}
source(paste(git_folder,"R/sndet_dygraphs_snow_detection.R",sep = ""))
calib_snow == T
if(calib_snow == T){
SNOW = HS_calibr
}else{
SNOW = HS
}
if(HS_flag==1){
models_graph=fun_plot_models_HS(FILE = file,SNOW_HEIGHT = SNOW,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}else{
models_graph=fun_plot_models(FILE = file,ST_MODEL = snow_by_soil_temp,PAR_MODEL = snow_by_phar,MODEL = snow_detect)
models_graph
}
View(fun_plot_models_HS)
