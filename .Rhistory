getwd()
setwd("C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/")
roxygen2::roxygenise()
library(devtools)
document()
getwd()
roxygen2::roxygenise()
getwd()
document()
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Snow_detection_TS_PAR.R
# TITLE:        Visualize results of detecting snow presence using Soil Temperature and PAR sensors
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Snow_detection_TS_PAR.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
load(paste(git_folder,"data/Output/Snow_Filtering_RData/Snow_",file,".RData",sep = ""))
snow = rdata_output[[1]]
data_in_range = rdata_output[[2]]
data_no_outliers = rdata_output[[3]]
data_calibr = rdata_output[[4]]
data_smooth = rdata_output[[5]]
data_smooth_no_outliers =  rdata_output[[6]]
zoo_HS=merge(snow,data_in_range,data_no_outliers,data_calibr,data_smooth,data_smooth_no_outliers)
zoo_HS=merge.zoo(snow,data_in_range,data_no_outliers,data_calibr,data_smooth,data_smooth_no_outliers)
library(zoo)
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
load(paste(git_folder,"data/Output/Snow_Filtering_RData/Snow_",file,".RData",sep = ""))
snow = rdata_output[[1]]
data_in_range = rdata_output[[2]]
data_no_outliers = rdata_output[[3]]
data_calibr = rdata_output[[4]]
data_smooth = rdata_output[[5]]
data_smooth_no_outliers =  rdata_output[[6]]
zoo_HS=merge.zoo(snow,data_in_range,data_no_outliers,data_calibr,data_smooth,data_smooth_no_outliers)
library(dygraphs)
dygraph(zoo_HS)%>%dyRangeSelector()
zoo_HS=merge.zoo(HS_original,
HS_range_QC,
HS_rate_QC ,
HS_calibratd ,
HS_calibr_smoothed,
HS_calibr_smooothed_rate_QC)
rm(lis t=ls())
rm(list=ls())
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Snow_detection_TS_PAR.R
# TITLE:        Visualize results of detecting snow presence using Soil Temperature and PAR sensors
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"data/Output/Snow_Filtering_RData/Snow_",file,".RData",sep = ""))
HS_original = rdata_output[[1]]
HS_range_QC = rdata_output[[2]]
HS_rate_QC = rdata_output[[3]]
HS_calibratd = rdata_output[[4]]
HS_calibr_smoothed = rdata_output[[5]]
HS_calibr_smooothed_rate_QC =  rdata_output[[6]]
zoo_HS=merge.zoo(HS_original,
HS_range_QC,
HS_rate_QC ,
HS_calibratd ,
HS_calibr_smoothed,
HS_calibr_smooothed_rate_QC)
dygraph(zoo_HS)%>%dyRangeSelector()
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Snow_detection_TS_PAR.R
# TITLE:        Visualize results of detecting snow presence using Soil Temperature and PAR sensors
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"data/Output/Snow_Filtering_RData/Snow_",file,".RData",sep = ""))
HS_original = rdata_output[[1]]
HS_range_QC = rdata_output[[2]]
HS_rate_QC = rdata_output[[3]]
HS_calibratd = rdata_output[[4]]
HS_calibr_smoothed = rdata_output[[5]]
HS_calibr_smooothed_rate_QC =  rdata_output[[6]]
zoo_HS=merge.zoo(HS_original,
HS_range_QC,
HS_rate_QC ,
HS_calibratd ,
HS_calibr_smoothed,
HS_calibr_smooothed_rate_QC)
# ~~~~~~~~ Section 3 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Plot Snow_height original and elaborated
#------------------------------------------------------------------------------------------------------------------------------------------------------
dygraph(zoo_HS)%>%dyRangeSelector()
dygraph(zoo_HS, main=file)%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]")
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]")
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]") %>%
dyOptions(colors = RColorBrewer::brewer.pal(6, "Set2"))
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]") %>%
dyOptions(colors = RColorBrewer::brewer.pal(6, "Set1"))
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]") %>%
dyOptions(colors = rev(RColorBrewer::brewer.pal(6, "Set1")))
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]") %>%
dyOptions(colors = rev(RColorBrewer::brewer.pal(6, "Dark2")))
dygraph(zoo_HS, main=paste("HS elaboration on",file))%>%dyRangeSelector() %>%
dyAxis("y", label = "Snow_Height [m]") %>%
dyOptions(colors = RColorBrewer::brewer.pal(6, "Dark2"))
display.brewer.pal(n = 8, name = 'Dark2')
library(RColorBrewer)
display.brewer.pal(n = 8, name = 'Dark2')
```{r setup, include=TRUE}
library(RColorBrewer)
library(RColorBrewer)
display.brewer.pal(n = 8, name = 'Dark2')
knitr::opts_chunk$set(echo = TRUE)
library(RColorBrewer)
display.brewer.pal(n = 6, name = 'Dark2')
