#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopbricks")
#  require("geotopbricks")
#}
#
#
#if(!require("geotopOptim2"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopOptim2")
#  require("geotopOptim2")
#}
if(!require("dygraphs"))
{
install.packages(dygraphs)
require("dygraphs")
}
if(!require("hydroGOF"))
{
install.packages(hydroGOF)
require("hydroGOF")
}
if(!require("ggplot2"))
{
install.packages(ggplot2)
require("ggplot2")
}
#wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/geotopOptim2_tests/DOMEF_1500_Optim_001'
wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/Orchards_Monalisa/Latsch1_Calib_001'
alldata <- geotopLookUpTable(wpath = wpath)
obsnames <- attr(alldata,"observation_var")
simnames <- attr(alldata,"simulation_var")
fun_names <- c("min","mean","max","sum")
library(geotopbricks)
library(geotopOptim2)
#if(!require("geotopbricks"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopbricks")
#  require("geotopbricks")
#}
#
#
#if(!require("geotopOptim2"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopOptim2")
#  require("geotopOptim2")
#}
if(!require("dygraphs"))
{
install.packages(dygraphs)
require("dygraphs")
}
if(!require("hydroGOF"))
{
install.packages(hydroGOF)
require("hydroGOF")
}
if(!require("ggplot2"))
{
install.packages(ggplot2)
require("ggplot2")
}
#wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/geotopOptim2_tests/DOMEF_1500_Optim_001'
wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/Orchards_Monalisa/Latsch1_Calib_001'
alldata <- geotopLookUpTable(wpath = wpath)
obsnames <- attr(alldata,"observation_var")
simnames <- attr(alldata,"simulation_var")
fun_names <- c("min","mean","max","sum")
help(
library(geotopbricks)
library(geotopOptim2)
#if(!require("geotopbricks"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopbricks")
#  require("geotopbricks")
#}
#
#
#if(!require("geotopOptim2"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopOptim2")
#  require("geotopOptim2")
#}
if(!require("dygraphs"))
{
install.packages(dygraphs)
require("dygraphs")
}
if(!require("hydroGOF"))
{
install.packages(hydroGOF)
require("hydroGOF")
}
if(!require("ggplot2"))
{
install.packages(ggplot2)
require("ggplot2")
}
#wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/geotopOptim2_tests/DOMEF_1500_Optim_001'
wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/Orchards_Monalisa/Latsch1_Calib_001'
alldata <- geotopLookUpTable(wpath = wpath)
obsnames <- attr(alldata,"observation_var")
simnames <- attr(alldata,"simulation_var")
fun_names <- c("min")
help(geotopLookUpTable)
library(geotopbricks)
library(geotopOptim2)
#if(!require("geotopbricks"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopbricks")
#  require("geotopbricks")
#}
#
#
#if(!require("geotopOptim2"))
#{
#  if(!require("devtools"))
#  {
#    install.packages(devtools)
#    require("devtools")
#  }
#  install_github("ecor/geotopOptim2")
#  require("geotopOptim2")
#}
if(!require("dygraphs"))
{
install.packages(dygraphs)
require("dygraphs")
}
if(!require("hydroGOF"))
{
install.packages(hydroGOF)
require("hydroGOF")
}
if(!require("ggplot2"))
{
install.packages(ggplot2)
require("ggplot2")
}
#wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/geotopOptim2_tests/DOMEF_1500_Optim_001'
wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/Orchards_Monalisa/Latsch1_Calib_001'
alldata <- geotopLookUpTable(wpath = wpath)
obsnames <- attr(alldata,"observation_var")
simnames <- attr(alldata,"simulation_var")
fun_names <- c("min","mean","max","sum")
geotopLookUpTable
alldata <- geotopLookUpTable(wpath = wpath)
wpath
wpath
if(!require("dygraphs"))
{
install.packages(dygraphs)
require("dygraphs")
}
if(!require("hydroGOF"))
{
install.packages(hydroGOF)
require("hydroGOF")
}
if(!require("ggplot2"))
{
install.packages(ggplot2)
require("ggplot2")
}
#wpath <-  'file:///C:/Users/GBertoldi/Documents/Simulations_local/geotopOptim2_tests/DOMEF_1500_Optim_001'
wpath <-  'C:/Users/GBertoldi/Documents/Simulations_local/Orchards_Monalisa/Latsch1_Calib_001'
alldata <- geotopLookUpTable(wpath = wpath)
obsnames <- attr(alldata,"observation_var")
simnames <- attr(alldata,"simulation_var")
fun_names <- c("min","mean","max","sum")
wpath
dir(wpath)
out <- geotopLookUpTable(wpath = wpath , save_rData = TRUE)
if (is.null(lookup_tbl_observation)) {
lookup_tbl_observation_csv <- system.file('tool/lookup_tbl_observation.csv',package="geotopAnalysis")
lookup_tbl_observation     <- read.table(lookup_tbl_observation_csv,sep=";",header=TRUE,stringsAsFactors=FALSE)
} else if (identical(lookup_tbl_observation,"ObservationLookupTblFile")) {
lookup_tbl_observation <- get.geotop.inpts.keyword.value('ObservationLookupTblFile',wpath=wpath,data.frame=TRUE,formatter="",inpts.file=inpts.file,col_sep=";")
}
lookup_tbl_observation="ObservationLookupTblFile"
soil_files=TRUE, save_rData=TRUE,tz="Etc/GMT-1",level=1,inpts.file="geotop.inpts",merge.output=TRUE,when=NULL
soil_files=TRUE, save_rData=TRUE,tz="Etc/GMT-1",level=1,inpts.file="geotop.inpts",merge.output=TRUE,when=NULL
if (is.null(lookup_tbl_observation)) {
lookup_tbl_observation_csv <- system.file('tool/lookup_tbl_observation.csv',package="geotopAnalysis")
lookup_tbl_observation     <- read.table(lookup_tbl_observation_csv,sep=";",header=TRUE,stringsAsFactors=FALSE)
} else if (identical(lookup_tbl_observation,"ObservationLookupTblFile")) {
lookup_tbl_observation <- get.geotop.inpts.keyword.value('ObservationLookupTblFile',wpath=wpath,data.frame=TRUE,formatter="",inpts.file=inpts.file,col_sep=";")
}
debugSource('C:/Users/GBertoldi/OwnCloud/documents/Backup_2015_11_24/R/R_scripts/Emanuele/ViewSimulation.R')
n
debugSource('C:/Users/GBertoldi/OwnCloud/documents/Backup_2015_11_24/R/R_scripts/Emanuele/ViewSimulation.R')
debugSource('C:/Users/GBertoldi/OwnCloud/documents/Backup_2015_11_24/R/R_scripts/Emanuele/ViewSimulation.R')
geotop_where
geotop_where
remove.packages(packgs="geotopOptim2")
remove.packages(pckgs="geotopOptim2")
remove.packages(pckgs="geotopOptim2")
remove.packages("geotopOptim2")
remove.packages("AnalyseGeotop")
remove.packages("geotopbricks")
install_github("ecor/geotopbricks")
library(devtools)
install_github("ecor/geotopbricks")
install_github("ecor/geotopOptim2")
install_github("Jbrenn/Analyzegeotop")
install_github("JBrenn/AnalyseGEOtop")
install_github("JBrenn/AnalyseGEOtop")
install.packages("devtools")
install.packages("devtools")
install_github("JBrenn/AnalyseGEOtop")
library(devtools)
library("devtools")
install.packages("devtools")
library(devtools)
install_github("JBrenn/AnalyseGEOtop")
install_github("ecor/AnalyseGEOtop")
library("scales", lib.loc="~/R/win-library/3.3")
install.packages("scales")
library("scales", lib.loc="~/R/win-library/3.3")
install.packages(c("scales", "shiny"))
install.packages("devtools")
library(devtools)
install_github("JBrenn/AnalyseGEOtop")
devtools::install_git('https://gitlab.inf.unibz.it/Samuel.Senoner/AnalyseGEOtop')
install.packages("snow")
R.Version()
install.packages("rmarkdown")
install.packages("rmarkdown")
#
#
# Author: Emanuele Cordano
#
# Test: tast simulation settings for GOF
#
rm(list=ls())
library(geotopOptim2)
#wpath <-  '/home/ecor/local-projects/MonaLisa/run/DOMEF_1500_Optim_005'
wpath <- "C:\\Users\\GBertoldi\\Documents\\Simulations_local\\MonaLisaSims_20170207\\DOMEF_1500_Optim_005"
##wpath <- system.file('geotop-simulation/B2site',package="geotopOptim2")
bin <-   "/home/ecor/local/geotop/GEOtop/bin/geotop-2.0.0"
runpath <- "/home/ecor/temp/geotopOptim_tests"
var <- 'soil_moisture_content_50'
param <- NULL ##c(N=1.4,Alpha=0.0021,ThetaRes=0.05)
ssout <- geotopGOF(x=param,run.geotop=TRUE,bin=bin,
simpath=wpath,runpath=runpath,clean=TRUE,data.frame=TRUE,
level=1,intern=TRUE,temporary.runpath=TRUE)
#
library(devtools)
install_github("EURAC-Ecohydro/geotopOptim2")
source('~/Git/szipper/ARF1D/ProcessingScripts/geotop_output_WaterBalance.R')
install.packages("lubridate")
source('~/Git/szipper/ARF1D/ProcessingScripts/geotop_output_WaterBalance.R')
source('~/Git/szipper/ARF1D/ProcessingScripts/geotop_output_WaterBalance.R')
Sys.which("git")
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
getwd
getwd()
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
files_available=dir(paste(git_folder,"data/Input_data",sep = ""))
print(paste("Example data:",files_available))
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=paste(getwd(),"/",sep="")
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"data/Input_data",sep = ""))
print(paste("Example data:",files_available))
# Readme!
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=paste(getwd(),"/",sep="")
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Example data:",files_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=paste(getwd(),"/",sep="")
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Example data:",files_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
git_folder
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Example data:",files_available))
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Example data:",files_available))
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Example data:",files_available))
-----------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("EAvaliable meta data:",files_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/esqc_ESOLIP_quality_check.R",sep = ""))
# ====== INPUT ======
# you type here the file you want to process among the avaliable ones
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("EAvaliable meta data:",metadata_available))
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
# ===================
ource(paste(git_folder,"/R/esqc_ESOLIP_quality_check.R",sep = ""))
# ====== INPUT ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
# Readme!
# Option 1: save a .Rdata --> activate only "save(esolip_output, ..."
# Option 2: save 2 .csv   --> * activate "esolip_data <- ..." and "esolip_events <- ..."
#                             * activate the two "write.csv"
t1=Sys.time()
esolip_output <- ESOLIP_QC(PATH <- path, FILE <- file, ELEVATION <- elevation, CLIMAREPORT <- climareport,git_folder)
esolip_data=esolip_output[[1]]
esolip_events=esolip_output[[2]]
t2=Sys.time()
Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("EAvaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/esqc_ESOLIP_quality_check.R",sep = ""))
# ====== INPUT ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
# Readme!
# Option 1: save a .Rdata --> activate only "save(esolip_output, ..."
# Option 2: save 2 .csv   --> * activate "esolip_data <- ..." and "esolip_events <- ..."
#                             * activate the two "write.csv"
t1=Sys.time()
esolip_output <- ESOLIP_QC(PATH <- path, FILE <- file, ELEVATION <- elevation, CLIMAREPORT <- climareport,git_folder)
esolip_data=esolip_output[[1]]
esolip_events=esolip_output[[2]]
t2=Sys.time()
source(paste(git_folder,"/R/esqc_ESOLIP_quality_check.R",sep = ""))
# ====== INPUT ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
# Readme!
# Option 1: save a .Rdata --> activate only "save(esolip_output, ..."
# Option 2: save 2 .csv   --> * activate "esolip_data <- ..." and "esolip_events <- ..."
#                             * activate the two "write.csv"
t1=Sys.time()
esolip_output <- ESOLIP_QC(PATH <- path, FILE <- file, ELEVATION <- elevation, CLIMAREPORT <- climareport,git_folder)
esolip_data=esolip_output[[1]]
esolip_events=esolip_output[[2]]
t2=Sys.time()
source(paste(git_folder,"/R/esqc_ESOLIP_quality_check.R",sep = ""))
# ====== INPUT ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv
elevation <- 1950
climareport <- paste(git_folder,"/data/Climareport/Climareport.csv",sep = "")
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
# Readme!
# Option 1: save a .Rdata --> activate only "save(esolip_output, ..."
# Option 2: save 2 .csv   --> * activate "esolip_data <- ..." and "esolip_events <- ..."
#                             * activate the two "write.csv"
t1=Sys.time()
esolip_output <- ESOLIP_QC(PATH <- path, FILE <- file, ELEVATION <- elevation, CLIMAREPORT <- climareport,git_folder)
esolip_data=esolip_output[[1]]
esolip_events=esolip_output[[2]]
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
# Readme!
# save a .Rdata --> activate only "save(esolip_output, ..."
# save 2 .csv   --> * activate "esolip_data <- ..." and "esolip_events <- ..."
#                             * activate the two "write.csv"
save(esolip_output,file=paste(git_folder,"/data/Output/Precipitation_metadata_RData/ESQC_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(esolip_data,paste(git_folder,"/data/Output/Precipitation_metadata/Precip_T_Int_15_Metadata/Prec_Metadata_",file,sep = ""),quote = F,row.names = F,na = "NaN")
write.csv(esolip_events,paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/ESQC_Steps_",file,sep = ""),quote = F,row.names = F,na = "NaN")
