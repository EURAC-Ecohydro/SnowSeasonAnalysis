# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
t1=Sys.time()
SWE_snowfall = SWE_estimation(git_folder = git_folder,PATH = path,FILE = file,
PATH_SNOW = path_filtered_snow, FILE_SNOW = file_snow,
PATH_ESOLIP_QC = path_esolip_qc,FILE_ESOLIP_QC = file_esolip_qc,
PRECIPITATION = precipitation, AIR_TEMPERATURE = air_temperature,WIND_SPPED = wind_speed)
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
list2env(SWE_snowfall, .GlobalEnv)
SWE_dataframe=data.frame(index(SWE), as.numeric(SWE),as.numeric(SWE_filtered))
colnames(SWE_dataframe)=c("TIMESTAMP","SWE","SWE_filtered")
save(SWE_snowfall,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(SWE_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/SWE_",file,sep = ""),quote = F,row.names = F,na = "NaN")
# ==================================
plot(rho)
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Winter_precipitation_estimation_from_SWE.R
# Description:  Winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ====== INPUT 1 ======
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===================
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("Avaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
t1=Sys.time()
SWE_snowfall = SWE_estimation(git_folder = git_folder,PATH = path,FILE = file,
PATH_SNOW = path_filtered_snow, FILE_SNOW = file_snow,
PATH_ESOLIP_QC = path_esolip_qc,FILE_ESOLIP_QC = file_esolip_qc,
PRECIPITATION = precipitation, AIR_TEMPERATURE = air_temperature,WIND_SPPED = wind_speed)
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
list2env(SWE_snowfall, .GlobalEnv)
SWE_dataframe=data.frame(index(SWE), as.numeric(SWE_filtered))
colnames(SWE_dataframe)=c("TIMESTAMP","SWE")
rho_dataframe=data.frame(index(rho), as.numeric(rho))
colnames(rho_dataframe)=c("TIMESTAMP","rho")
save(SWE_snowfall,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(SWE_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/SWE_",file,sep = ""),quote = F,row.names = F,na = "NaN")
write.csv(rho_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/rho_",file,sep = ""),quote = F,row.names = F,na = "NaN")
# ==================================
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Winter_precipitation_estimation_from_SWE.R
# Description:  Winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ====== INPUT 1 ======
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===================
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("Avaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
t1=Sys.time()
SWE_snowfall = SWE_estimation(git_folder = git_folder,PATH = path,FILE = file,
PATH_SNOW = path_filtered_snow, FILE_SNOW = file_snow,
PATH_ESOLIP_QC = path_esolip_qc,FILE_ESOLIP_QC = file_esolip_qc,
PRECIPITATION = precipitation, AIR_TEMPERATURE = air_temperature,WIND_SPPED = wind_speed)
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
list2env(SWE_snowfall, .GlobalEnv)
SWE_dataframe=data.frame(index(SWE), as.numeric(SWE_filtered))
colnames(SWE_dataframe)=c("TIMESTAMP","SWE")
rho_dataframe=data.frame(index(rho), as.numeric(rho))
colnames(rho_dataframe)=c("TIMESTAMP","rho")
save(SWE_snowfall,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(SWE_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/SWE_",file,sep = ""),quote = F,row.names = F,na = "NaN")
write.csv(rho_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/rho_",file,sep = ""),quote = F,row.names = F,na = "NaN")
# ==================================
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Winter_precipitation_estimation_from_SWE.R
# TITLE:        Visualize results of winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
rm(list = ls())
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
git_folder=getwd()
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",file,".RData",sep = ""))
list2env(SWE_snowfall, .GlobalEnv)
zoo_SWE_snowfall=merge.zoo(SWE,SWE_filtered, snow, precipitation, derivate_snow)
# ~~~~~~~~ Section 2 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Plot Snow_height original and elaborated
#------------------------------------------------------------------------------------------------------------------------------------------------------
dygraph(zoo_SWE_snowfall, main=paste("SWE Analysis",file)) %>% dyRangeSelector()%>%
dySeries("snow",axis = "y", color = "blue")%>%
dySeries("derivate_snow",axis = "y", color =  "green")%>%
dySeries("SWE",axis = "y2",color = "lime")%>%
dySeries("SWE_filtered",axis = "y2",color = "red")%>%
dySeries("precipitation",axis = "y2", color = "orange")%>%
dyEvent(index(SWE_filtered)[which(!is.na(SWE_filtered))], color = "#ADE5EA",strokePattern = "solid") %>%
dyLimit(0.001) %>%
dyAxis("y", label = "Snow_Height [m]",axisLineColor = "blue",axisLabelColor = "blue") %>%
dyAxis("y2", label = "Precipitation/SWE [mm]", axisLineColor = "red",axisLabelColor = "red")
zoo_SWE_snowfall=merge.zoo(SWE_filtered, snow, precipitation, derivate_snow)
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Winter_precipitation_estimation_from_SWE.R
# Description:  Winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ====== INPUT 1 ======
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===================
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("Avaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Winter_precipitation_estimation_from_SWE.R
# Description:  Winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ====== INPUT 1 ======
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===================
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("Avaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
increment_threshold <- 0.001        # <-- assign here the threshold on derivative  . Default is 0.001 m (1 mm/h of snow correspond to 0.1 mm/h of water whith rho = 100 kg/m³)
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
t1=Sys.time()
SWE_snowfall = SWE_estimation(git_folder = git_folder,PATH = path,FILE = file,
PATH_SNOW = path_filtered_snow, FILE_SNOW = file_snow,
PATH_ESOLIP_QC = path_esolip_qc,FILE_ESOLIP_QC = file_esolip_qc,
PRECIPITATION = precipitation, AIR_TEMPERATURE = air_temperature,WIND_SPPED = wind_speed,
INCREMENT_THRESHOLD = increment_threshold)
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
list2env(SWE_snowfall, .GlobalEnv)
SWE_dataframe=data.frame(index(SWE), as.numeric(SWE_filtered))
colnames(SWE_dataframe)=c("TIMESTAMP","SWE")
rho_dataframe=data.frame(index(rho), as.numeric(rho))
colnames(rho_dataframe)=c("TIMESTAMP","rho")
save(SWE_snowfall,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(SWE_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/SWE_",file,sep = ""),quote = F,row.names = F,na = "NaN")
write.csv(rho_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/rho_",file,sep = ""),quote = F,row.names = F,na = "NaN")
# ==================================
save(c(SWE_snowfall,increment_threshold),file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
new_list=c(SWE_snowfall,increment_threshold)
length(new_list)
names(new_list)[length(new_list)]="increment_threshold"
names(new_list)[length(new_list)]="increment_threshold"
new_list=c(SWE_snowfall,increment_threshold)
names(new_list)[length(new_list)]="increment_threshold"
save(new_list,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Winter_precipitation_estimation_from_SWE.R
# TITLE:        Visualize results of winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
rm(list = ls())
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
git_folder=getwd()
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",file,".RData",sep = ""))
list2env(SWE_snowfall, .GlobalEnv)
list2env(new_list, .GlobalEnv)
load(paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",file,".RData",sep = ""))
list2env(new_list, .GlobalEnv)
zoo_SWE_snowfall=merge.zoo(SWE_filtered, snow, precipitation, derivate_snow)
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Winter_precipitation_estimation_from_SWE.R
# TITLE:        Visualize results of winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
rm(list = ls())
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
git_folder=getwd()
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",file,".RData",sep = ""))
list2env(new_list, .GlobalEnv)
zoo_SWE_snowfall=merge.zoo(SWE_filtered, snow, precipitation, derivate_snow)
# ~~~~~~~~ Section 2 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Plot Snow_height original and elaborated
#------------------------------------------------------------------------------------------------------------------------------------------------------
dygraph(zoo_SWE_snowfall, main=paste("SWE Analysis",file)) %>% dyRangeSelector()%>%
dySeries("snow",axis = "y", color = "blue")%>%
dySeries("derivate_snow",axis = "y", color =  "green")%>%
dySeries("SWE_filtered",axis = "y2",color = "red")%>%
dySeries("precipitation",axis = "y2", color = "orange")%>%
dyEvent(index(SWE_filtered)[which(!is.na(SWE_filtered))], color = "#ADE5EA",strokePattern = "solid") %>%
dyLimit(increment_threshold) %>%
dyAxis("y", label = "Snow_Height [m]",axisLineColor = "blue",axisLabelColor = "blue") %>%
dyAxis("y2", label = "Precipitation/SWE [mm]", axisLineColor = "red",axisLabelColor = "red")
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Winter_precipitation_estimation_from_SWE.R
# Description:  Winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         20/12/2016
# Version:      1.0
#------------------------------------------------------------------------------------------------------------------------------------------------------
require(zoo)
require(chron)
require(dygraphs)
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Define your Git folder:
#------------------------------------------------------------------------------------------------------------------------------------------------------
# ====== INPUT 1 ======
setwd("~/Git/EURAC-Ecohydro/SnowSeasonAnalysis")
git_folder=getwd()
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
# ===================
# ~~~~~~ Section 1 ~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Show data available
#------------------------------------------------------------------------------------------------------------------------------------------------------
files_available=dir(paste(git_folder,"/data/Input_data",sep = ""))
print(paste("Avaliable input data:",files_available))
metadata_available=dir(paste(git_folder,"/data/Climareport",sep = ""))
print(paste("Avaliable meta data:",metadata_available))
# Readme!
# You can process: B1_1000_TOTAL_2009_2016.csv, B3_2000m_TOTAL.csv, M3_total_2009_2016_15min.csv (no snow_height),M0004.csv (no snow_height)
# Elevation:              980,                         1950,                 2330,                                     1990
# Input example:
# PATH <- "C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/Input_data/"
# FILE="B3_2000m_TOTAL.csv"
# ELEVATION=1950
source(paste(git_folder,"/R/SWE_estimation.R",sep = ""))
# ====== INPUTS 2-9 ======
# you type here the file you want to process among the avaliable ones
# and corresponding elevation and metadata
path <- paste(git_folder,"/data/Input_data/",sep = "")      # <-- path of original dataset
path_filtered_snow <- paste(git_folder,"/data/Output/Snow_Filtering/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
path_esolip_qc <- paste(git_folder,"/data/Output/Precipitation_metadata/ESOLIP_QC_Steps/",sep = "")      # <-- path of snow dataset elaborated from "Filtering_snow_height.R" algorithms
file  <- "B3_2000m_TOTAL.csv" # <-- with .csv    # <--  name of file of original dataset
file_snow <- paste("Snow_",file,sep = "")        # <--  name of file of snow dataset
file_esolip_qc <- paste("ESQC_Steps_",file,sep = "")        # <--  name of file of snow dataset
precipitation = "Precip_T_Int15"    # <-- assign here the column name corresponding with precipitation parameter. Default (LTER stations) is "Precip_T_Int15"
air_temperature <- "T_Air"          # <-- assign here the column name corresponding with air temperature parameter. Default (LTER stations) is "T_Air"
wind_speed <- "Wind_Speed"          # <-- assign here the column name corresponding with wind speed parameter. Default (LTER stations) is "Wind_Speed"
increment_threshold <- 0.002        # <-- assign here the threshold on derivative  . Default is 0.001 m (1 mm/h of snow correspond to 0.1 mm/h of water whith rho = 100 kg/m³)
# ===================
# ~~~~~~ Section 2 ~~~~~~
# ====== RUN ESOLIP ALGORITHM ======
t1=Sys.time()
SWE_snowfall = SWE_estimation(git_folder = git_folder,PATH = path,FILE = file,
PATH_SNOW = path_filtered_snow, FILE_SNOW = file_snow,
PATH_ESOLIP_QC = path_esolip_qc,FILE_ESOLIP_QC = file_esolip_qc,
PRECIPITATION = precipitation, AIR_TEMPERATURE = air_temperature,WIND_SPPED = wind_speed,
INCREMENT_THRESHOLD = increment_threshold)
t2=Sys.time()
# ===================
# ~~~~~~ Section 3 ~~~~~~
# ====== SAVE RESULTS IN A .RData OR IN TWO .csv ======
list2env(SWE_snowfall, .GlobalEnv)
SWE_dataframe=data.frame(index(SWE), as.numeric(SWE_filtered))
colnames(SWE_dataframe)=c("TIMESTAMP","SWE")
rho_dataframe=data.frame(index(rho), as.numeric(rho))
colnames(rho_dataframe)=c("TIMESTAMP","rho")
new_list=c(SWE_snowfall,increment_threshold)
names(new_list)[length(new_list)]="increment_threshold"
save(new_list,file=paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",substring(file,1,nchar(file)-4), ".RData",sep=""))
write.csv(SWE_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/SWE_",file,sep = ""),quote = F,row.names = F,na = "NaN")
write.csv(rho_dataframe,paste(git_folder,"/data/Output/SWE_from_snow_height/rho_",file,sep = ""),quote = F,row.names = F,na = "NaN")
# ==================================
#-------------------------------------------------------------------------------------------------------------------------------------------------------
# File Title:   Visualize_Winter_precipitation_estimation_from_SWE.R
# TITLE:        Visualize results of winter precipitation reconstruction using snow height increment
# Autor:        Christian Brida
#               Institute for Alpine Environment
# Data:         19/07/2017
# Version:      1.0
#
#------------------------------------------------------------------------------------------------------------------------------------------------------
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Load .RData saved from Filtering_snow_height.R
#------------------------------------------------------------------------------------------------------------------------------------------------------
library(zoo)
library(dygraphs)
rm(list = ls())
# ==== INPUT ====
file = "B3_2000m_TOTAL"   # without .csv
#git_folder="C:/Users/CBrida/Desktop/Git/Upload/SnowSeasonAnalysis/"
git_folder=getwd()
# ===============
# ~~~~~~~~ Section 1 ~~~~~~~~
load(paste(git_folder,"/data/Output/SWE_from_snow_height_RData/SWE_analysis_",file,".RData",sep = ""))
list2env(new_list, .GlobalEnv)
zoo_SWE_snowfall=merge.zoo(SWE_filtered, snow, precipitation, derivate_snow)
# ~~~~~~~~ Section 2 ~~~~~~~~
#------------------------------------------------------------------------------------------------------------------------------------------------------
# Plot Snow_height original and elaborated
#------------------------------------------------------------------------------------------------------------------------------------------------------
dygraph(zoo_SWE_snowfall, main=paste("SWE Analysis",file)) %>% dyRangeSelector()%>%
dySeries("snow",axis = "y", color = "blue")%>%
dySeries("derivate_snow",axis = "y", color =  "green")%>%
dySeries("SWE_filtered",axis = "y2",color = "red")%>%
dySeries("precipitation",axis = "y2", color = "orange")%>%
dyEvent(index(SWE_filtered)[which(!is.na(SWE_filtered))], color = "#ADE5EA",strokePattern = "solid") %>%
dyLimit(increment_threshold) %>%
dyAxis("y", label = "Snow_Height [m]",axisLineColor = "blue",axisLabelColor = "blue") %>%
dyAxis("y2", label = "Precipitation/SWE [mm]", axisLineColor = "red",axisLabelColor = "red")
